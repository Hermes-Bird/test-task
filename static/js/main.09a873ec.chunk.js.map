{"version":3,"sources":["actions/types.ts","reducer/index.ts","components/Loader.tsx","components/EmptyList.tsx","components/Repo.tsx","components/Repos.tsx","actions/repos.ts","components/ReposList.tsx","components/SearchBar.tsx","components/App.tsx","index.tsx"],"names":["ActionTypes","initialState","fetchedRepos","searchedRepos","reducers","combineReducers","repos","state","action","type","fetchRepos","payload","searchRepos","filter","repo","lowerCaseQuery","toLowerCase","repoName","includes","ListLoader","className","Dimmer","active","inverted","Loader","size","EmptyList","Grid","verticalAlign","textAlign","container","Row","Column","name","Header","Repo","description","repoUrl","update","language","Segment","as","Container","rows","columns","href","floated","Button","List","horizontal","Item","Content","Label","circular","empty","Repos","length","map","i","key","monthNames","connect","dispatch","a","axios","get","apiRepos","data","updateText","updateDate","Date","updated_at","diff","now","getTime","days","Math","ceil","getMonth","getDate","getFullYear","full_name","html_url","useState","isLoading","setIsLoading","useEffect","catch","err","console","log","message","finally","query","Input","fluid","icon","placeholder","onChange","e","target","value","App","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09a873ec.chunk.js","sourcesContent":["export enum ActionTypes {\r\n    fetchRepos,\r\n    searchRepos\r\n}","import { combineReducers } from \"redux\";\r\nimport { Actions, IRepo } from \"../actions/repos\";\r\nimport { ActionTypes } from \"../actions/types\";\r\n\r\ninterface IRepos {\r\n    fetchedRepos: IRepo[],\r\n    searchedRepos: IRepo[] \r\n}\r\n\r\nconst initialState: IRepos = {\r\n    fetchedRepos: [],\r\n    searchedRepos: []\r\n} \r\n\r\nconst reposReducer = (state: IRepos = initialState, action: Actions) => {\r\n    switch (action.type) {\r\n        case ActionTypes.fetchRepos:\r\n            return {\r\n                searchedRepos: action.payload,\r\n                fetchedRepos: action.payload\r\n            }\r\n        case ActionTypes.searchRepos:\r\n            let searchedRepos\r\n\r\n            if (action.payload) {\r\n                searchedRepos = state.fetchedRepos.filter(repo => {\r\n                    const lowerCaseQuery = action.payload.toLowerCase()\r\n                    const lowerCaseRepoName = repo.repoName.toLowerCase()\r\n                    return lowerCaseRepoName.includes(lowerCaseQuery)\r\n                })\r\n            } else searchedRepos = [...state.fetchedRepos]\r\n\r\n            return {\r\n                ...state,\r\n                searchedRepos\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport interface IStoreState {\r\n    repos: IRepos\r\n}\r\n\r\nexport const reducers = combineReducers<IStoreState>({\r\n    repos: reposReducer\r\n})","import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\nconst ListLoader = () => {\r\n    return (\r\n        <div className=\"list-loader\">\r\n            <Dimmer active inverted>\r\n                <Loader size=\"massive\">Loading</Loader>\r\n            </Dimmer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListLoader\r\n","import React from 'react'\r\nimport { Grid, Header } from 'semantic-ui-react'\r\nimport Icon from 'semantic-ui-react/dist/commonjs/elements/Icon'\r\n\r\nconst EmptyList = () => {\r\n    return (\r\n        <Grid verticalAlign=\"middle\" textAlign=\"center\" container>\r\n            <Grid.Row>\r\n                <Grid.Column>\r\n                    <Icon name=\"inbox\" size=\"huge\" />\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column>\r\n                    <Header>List is empty</Header>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default EmptyList\r\n","import React from 'react'\r\nimport { Button, Container, Grid, Icon, Label, List, Segment } from 'semantic-ui-react'\r\n\r\ninterface IRepoProps {\r\n    description: string | null\r\n    repoUrl: string\r\n    repoName: string\r\n    language: string\r\n    update: string\r\n}\r\n\r\nconst Repo: React.FC<IRepoProps> = ({description, repoName, repoUrl, update, language}) => {\r\n    return (\r\n        <Segment as={Container}>\r\n            <Grid rows={3}>\r\n                <Grid.Row columns={2}>\r\n                    <Grid.Column as=\"a\" href={repoUrl} className=\"repo-link\" floated=\"left\">\r\n                        {repoName}\r\n                    </Grid.Column>\r\n                    <Grid.Column floated=\"right\">\r\n                        <Button floated=\"right\" size=\"tiny\">\r\n                            <Icon name=\"star outline\"/>\r\n                            Star\r\n                        </Button>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                {\r\n                    description ? (\r\n                        <Grid.Row>\r\n                            <Grid.Column>\r\n                                {description}\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    ) : null\r\n                }\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        <List horizontal verticalAlign=\"middle\">\r\n                            <List.Item>\r\n                                <List.Content as=\"span\">\r\n                                    <Label circular empty/>\r\n                                    <span className=\"lang-name\">\r\n                                        {language}\r\n                                    </span>\r\n                                </List.Content>\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <List.Content as=\"span\">\r\n                                    Updated {update}\r\n                                </List.Content>\r\n                            </List.Item>\r\n                        </List>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default Repo","import React from 'react'\r\nimport { IRepo } from '../actions/repos'\r\nimport EmptyList from './EmptyList'\r\nimport Repo from './Repo'\r\n\r\nconst Repos: React.FC<{repos: IRepo[]}> = ({repos}) => {\r\n    if (repos.length === 0) return <EmptyList/>\r\n    \r\n    return (\r\n        <>\r\n            {repos.map((repo, i) => <Repo {...repo} key={i} />)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Repos\r\n","import axios from 'axios'\r\nimport { Dispatch } from 'redux'\r\nimport { ActionTypes } from './types'\r\n\r\nexport interface IRepo {\r\n    description: string | null\r\n    repoUrl: string\r\n    repoName: string\r\n    language: string\r\n    update: string\r\n}\r\n\r\ninterface IApiRepo {\r\n    description: string | null\r\n    full_name: string\r\n    html_url: string\r\n    language: string\r\n    updated_at: string\r\n}\r\n\r\nexport interface IFetchReposAction {\r\n    type: ActionTypes.fetchRepos\r\n    payload: IRepo[]\r\n}\r\n\r\nexport interface ISearchReposAction {\r\n    type: ActionTypes.searchRepos\r\n    payload: string\r\n}\r\n\r\nexport type Actions = IFetchReposAction | ISearchReposAction\r\n\r\nconst baseUrl = 'https://api.github.com/users/Hermes-bird/repos'\r\n\r\nconst monthNames = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December'\r\n]\r\n\r\nexport const fetchRepos = () => async (dispatch: Dispatch) => {\r\n    const { data: apiRepos } = await axios.get<IApiRepo[]>(baseUrl)\r\n\r\n    const repos: IRepo[] = apiRepos.map(repo => {\r\n        let updateText\r\n        const updateDate = new Date(repo.updated_at)\r\n        const diff = Date.now() - updateDate.getTime()\r\n        const days = Math.ceil(diff / (1000 * 60 * 60 * 24))\r\n\r\n        if (days < 100)\r\n            updateText =\r\n                days === 0 ? 'today' : `${days} day${days > 1 ? 's' : ''} ago`\r\n        else\r\n            updateText = `on ${\r\n                monthNames[updateDate.getMonth()]\r\n            } ${updateDate.getDate()} ${updateDate.getFullYear()}`\r\n\r\n        return {\r\n            description: repo.description,\r\n            update: updateText,\r\n            language: repo.language,\r\n            repoName: repo.full_name,\r\n            repoUrl: repo.html_url\r\n        }\r\n    })\r\n\r\n    dispatch<IFetchReposAction>({\r\n        type: ActionTypes.fetchRepos,\r\n        payload: repos\r\n    })\r\n}\r\n\r\nexport const searchRepos = (query: string): ISearchReposAction => {\r\n    return {\r\n        type: ActionTypes.searchRepos,\r\n        payload: query\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Segment } from 'semantic-ui-react'\r\nimport { IStoreState } from '../reducer'\r\nimport ListLoader from './Loader'\r\nimport Repos from './Repos'\r\nimport { fetchRepos, IRepo } from '../actions/repos'\r\n\r\ninterface IReposListProps {\r\n    repos: IRepo[]\r\n    fetchRepos: () => Promise<void>  \r\n}\r\n\r\nconst ReposList: React.FC<IReposListProps> = ({repos, fetchRepos}) => {\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    useEffect(() => {\r\n        fetchRepos()\r\n            .catch(err => {\r\n                console.log(err.message)\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false)\r\n            })\r\n    }, [fetchRepos])\r\n\r\n    return (\r\n        <Segment>\r\n            {\r\n                isLoading ? <ListLoader/> : <Repos repos={repos}/>\r\n            }\r\n        </Segment>\r\n    )\r\n}\r\nconst mapStateToProps = ({repos}: IStoreState) => {\r\n    return {repos: repos.searchedRepos}\r\n}\r\n\r\nexport default connect(mapStateToProps, {fetchRepos})(ReposList)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Input } from 'semantic-ui-react'\r\nimport { searchRepos } from '../actions/repos'\r\n\r\ninterface ISearchBarProps {\r\n    searchRepos: typeof searchRepos\r\n}\r\n\r\nconst SearchBar: React.FC<ISearchBarProps> = ({searchRepos}) => {\r\n    return (\r\n        <Input\r\n            className=\"searchbar\"\r\n            fluid\r\n            icon=\"search\"\r\n            placeholder=\"Search...\"\r\n            onChange={(e) => {\r\n                searchRepos(e.target.value)\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default connect(null, {searchRepos})(SearchBar)\r\n","import React from 'react'\r\nimport { Container } from 'semantic-ui-react'\r\nimport ReposList from './ReposList'\r\nimport SearchBar from './SearchBar'\r\n\r\n\r\nfunction App() {\r\n    return (\r\n\t\t<Container className=\"app-container\">\r\n\t\t\t<SearchBar />\r\n\t\t\t<ReposList />\r\n\t\t</Container>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { applyMiddleware, createStore } from 'redux'\r\nimport {Provider} from 'react-redux'\r\nimport { reducers } from './reducer'\r\nimport thunk from 'redux-thunk'\r\nimport App from './components/App'\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport './index.css'\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}